// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user_conversation.sql

package db

import (
	"context"
	"database/sql"
)

const createUser_conversation = `-- name: CreateUser_conversation :one
INSERT INTO "user_conversation" (user_id, conv_id)
VALUES($1, $2)
RETURNING id, user_id, conv_id
`

type CreateUser_conversationParams struct {
	UserID sql.NullInt64 `json:"userID"`
	ConvID sql.NullInt64 `json:"convID"`
}

func (q *Queries) CreateUser_conversation(ctx context.Context, arg CreateUser_conversationParams) (UserConversation, error) {
	row := q.db.QueryRowContext(ctx, createUser_conversation, arg.UserID, arg.ConvID)
	var i UserConversation
	err := row.Scan(&i.ID, &i.UserID, &i.ConvID)
	return i, err
}

const deleteUser_conversation = `-- name: DeleteUser_conversation :exec
DELETE FROM "user_conversation"
WHERE user_id = $1
  and conv_id = $2
`

type DeleteUser_conversationParams struct {
	UserID sql.NullInt64 `json:"userID"`
	ConvID sql.NullInt64 `json:"convID"`
}

func (q *Queries) DeleteUser_conversation(ctx context.Context, arg DeleteUser_conversationParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser_conversation, arg.UserID, arg.ConvID)
	return err
}

const getUser_conversation = `-- name: GetUser_conversation :one
SELECT id, user_id, conv_id
from "user_conversation"
WHERE user_id = $1
  and conv_id = $2
`

type GetUser_conversationParams struct {
	UserID sql.NullInt64 `json:"userID"`
	ConvID sql.NullInt64 `json:"convID"`
}

func (q *Queries) GetUser_conversation(ctx context.Context, arg GetUser_conversationParams) (UserConversation, error) {
	row := q.db.QueryRowContext(ctx, getUser_conversation, arg.UserID, arg.ConvID)
	var i UserConversation
	err := row.Scan(&i.ID, &i.UserID, &i.ConvID)
	return i, err
}

const listUser_conversationByUser = `-- name: ListUser_conversationByUser :many
SELECT id, user_id, conv_id
from "user_conversation"
WHERE user_id = $1
ORDER BY user_id
`

func (q *Queries) ListUser_conversationByUser(ctx context.Context, userID sql.NullInt64) ([]UserConversation, error) {
	rows, err := q.db.QueryContext(ctx, listUser_conversationByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserConversation
	for rows.Next() {
		var i UserConversation
		if err := rows.Scan(&i.ID, &i.UserID, &i.ConvID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUser_conversations = `-- name: ListUser_conversations :many
SELECT id, user_id, conv_id
from "user_conversation"
ORDER BY id
`

func (q *Queries) ListUser_conversations(ctx context.Context) ([]UserConversation, error) {
	rows, err := q.db.QueryContext(ctx, listUser_conversations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserConversation
	for rows.Next() {
		var i UserConversation
		if err := rows.Scan(&i.ID, &i.UserID, &i.ConvID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
