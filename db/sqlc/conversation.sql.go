// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: conversation.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createConversation = `-- name: CreateConversation :one
INSERT INTO "Conversation" (name)
VALUES($1)
RETURNING id, name
`

func (q *Queries) CreateConversation(ctx context.Context, name sql.NullString) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation, name)
	var i Conversation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteConversation = `-- name: DeleteConversation :exec
DELETE FROM "Conversation"
WHERE ID = $1
`

func (q *Queries) DeleteConversation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteConversation, id)
	return err
}

const getConversation = `-- name: GetConversation :one
SELECT id, name
FROM "Conversation"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetConversation(ctx context.Context, id int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversation, id)
	var i Conversation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listConvMessages = `-- name: ListConvMessages :many
SELECT 
"Message".from,"Message".content as message_content,"Message".created_at, "Message".id as message_id
FROM
"user_conversation"
INNER JOIN "Conversation" on "user_conversation".conv_id = "Conversation".id
INNER JOIN "Message" on "Conversation".id = "Message".conv_id
Where
"user_conversation".conv_id = $1
And "user_conversation".user_id=$2
`

type ListConvMessagesParams struct {
	ConvID int64 `json:"convID"`
	UserID int64 `json:"userID"`
}

type ListConvMessagesRow struct {
	From           string    `json:"from"`
	MessageContent string    `json:"messageContent"`
	CreatedAt      time.Time `json:"createdAt"`
	MessageID      int64     `json:"messageID"`
}

func (q *Queries) ListConvMessages(ctx context.Context, arg ListConvMessagesParams) ([]ListConvMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listConvMessages, arg.ConvID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListConvMessagesRow{}
	for rows.Next() {
		var i ListConvMessagesRow
		if err := rows.Scan(
			&i.From,
			&i.MessageContent,
			&i.CreatedAt,
			&i.MessageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listConversations = `-- name: ListConversations :many
SELECT id, name
FROM "Conversation"
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListConversationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListConversations(ctx context.Context, arg ListConversationsParams) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, listConversations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Conversation{}
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConversation = `-- name: UpdateConversation :one
UPDATE "Conversation"
SET name = $2
WHERE ID = $1
returning id, name
`

type UpdateConversationParams struct {
	ID   int64          `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpdateConversation(ctx context.Context, arg UpdateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, updateConversation, arg.ID, arg.Name)
	var i Conversation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
