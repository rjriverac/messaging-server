// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "Users" (
    name,
    email,
    hashed_pw,
    image,
    status
  )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, email, hashed_pw, image, status, created_at
`

type CreateUserParams struct {
	Name     string         `json:"name"`
	Email    string         `json:"email"`
	HashedPw string         `json:"hashedPw"`
	Image    sql.NullString `json:"image"`
	Status   sql.NullString `json:"status"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.HashedPw,
		arg.Image,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPw,
		&i.Image,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "Users"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id,
  name,
  email,
  image,
  status,
  created_at
FROM "Users"
WHERE id = $1
LIMIT 1
`

type GetUserRow struct {
	ID        int64          `json:"id"`
	Name      string         `json:"name"`
	Email     string         `json:"email"`
	Image     sql.NullString `json:"image"`
	Status    sql.NullString `json:"status"`
	CreatedAt time.Time      `json:"createdAt"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Image,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, hashed_pw, image, status, created_at
FROM "Users"
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPw,
		&i.Image,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listConvFromUser = `-- name: ListConvFromUser :many
SELECT 
"Conversation".id,"Conversation".name
FROM
"Users"
INNER JOIN "user_conversation" on "Users".id = "user_conversation".user_id
INNER JOIN "Conversation" on "user_conversation".conv_id = "Conversation".id
WHERE "Users".id = $1
`

func (q *Queries) ListConvFromUser(ctx context.Context, id int64) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, listConvFromUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Conversation{}
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserMessages = `-- name: ListUserMessages :many
SELECT 
"Conversation".name as conversation_name,"Message".from,"Message".content as message_content,"Message".created_at,
"user_conversation".conv_id, "Message".id as message_id
FROM
"Users"
INNER JOIN "user_conversation" on "Users".id = "user_conversation".user_id
INNER JOIN "Conversation" on "user_conversation".conv_id = "Conversation".id
inner JOIN "Message" on "Conversation".id = "Message".conv_id
Where "Users".id = $1
`

type ListUserMessagesRow struct {
	ConversationName sql.NullString `json:"conversationName"`
	From             string         `json:"from"`
	MessageContent   string         `json:"messageContent"`
	CreatedAt        time.Time      `json:"createdAt"`
	ConvID           int64          `json:"convID"`
	MessageID        int64          `json:"messageID"`
}

func (q *Queries) ListUserMessages(ctx context.Context, id int64) ([]ListUserMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserMessages, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUserMessagesRow{}
	for rows.Next() {
		var i ListUserMessagesRow
		if err := rows.Scan(
			&i.ConversationName,
			&i.From,
			&i.MessageContent,
			&i.CreatedAt,
			&i.ConvID,
			&i.MessageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id,
  name,
  email,
  image,
  status
FROM "Users"
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUsersRow struct {
	ID     int64          `json:"id"`
	Name   string         `json:"name"`
	Email  string         `json:"email"`
	Image  sql.NullString `json:"image"`
	Status sql.NullString `json:"status"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Image,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserInfo = `-- name: UpdateUserInfo :one
UPDATE "Users"
SET 
    name = coalesce($1, name),
    email = coalesce($2, email),
    image = coalesce($3, image),
    status = coalesce($4, status),
    hashed_pw = coalesce($5, hashed_pw)
where id = $6
RETURNING id,
  name,
  email,
  image,
  status,
  created_at
`

type UpdateUserInfoParams struct {
	Name     sql.NullString `json:"name"`
	Email    sql.NullString `json:"email"`
	Image    sql.NullString `json:"image"`
	Status   sql.NullString `json:"status"`
	HashedPw sql.NullString `json:"hashedPw"`
	ID       int64          `json:"id"`
}

type UpdateUserInfoRow struct {
	ID        int64          `json:"id"`
	Name      string         `json:"name"`
	Email     string         `json:"email"`
	Image     sql.NullString `json:"image"`
	Status    sql.NullString `json:"status"`
	CreatedAt time.Time      `json:"createdAt"`
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) (UpdateUserInfoRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserInfo,
		arg.Name,
		arg.Email,
		arg.Image,
		arg.Status,
		arg.HashedPw,
		arg.ID,
	)
	var i UpdateUserInfoRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Image,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
