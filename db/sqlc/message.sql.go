// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: message.sql

package db

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO "Message" ("user_id", "content")
VALUES($1, $2)
RETURNING id, user_id, content, created_at
`

type CreateMessageParams struct {
	UserID  int64          `json:"userID"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.UserID, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM "Message"
WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, user_id, content, created_at
from "Message"
WHERE id = $1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listMessageByUser = `-- name: ListMessageByUser :many
SELECT id, user_id, content, created_at
from "Message"
WHERE "user_id" = $1
ORDER BY created_at
`

func (q *Queries) ListMessageByUser(ctx context.Context, userID int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessageByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
