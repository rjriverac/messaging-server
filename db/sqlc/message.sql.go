// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: message.sql

package db

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO "Message" ("from", content, conv_id)
VALUES($1, $2, $3)
RETURNING id, "from", content, created_at, conv_id
`

type CreateMessageParams struct {
	From    string `json:"from"`
	Content string `json:"content"`
	ConvID  int64  `json:"convID"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.From, arg.Content, arg.ConvID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.From,
		&i.Content,
		&i.CreatedAt,
		&i.ConvID,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM "Message"
WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, "from", content, created_at, conv_id
from "Message"
WHERE id = $1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.From,
		&i.Content,
		&i.CreatedAt,
		&i.ConvID,
	)
	return i, err
}

const listMessageByUser = `-- name: ListMessageByUser :many
SELECT id, "from", content, created_at, conv_id
from "Message"
WHERE "from" = $1
ORDER BY created_at
`

func (q *Queries) ListMessageByUser(ctx context.Context, from string) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessageByUser, from)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.From,
			&i.Content,
			&i.CreatedAt,
			&i.ConvID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
