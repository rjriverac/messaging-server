// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rjriverac/messaging-server/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/rjriverac/messaging-server/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateConvTx mocks base method.
func (m *MockStore) CreateConvTx(arg0 context.Context, arg1 db.CreateConvParams) (db.ConvReturn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConvTx", arg0, arg1)
	ret0, _ := ret[0].(db.ConvReturn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConvTx indicates an expected call of CreateConvTx.
func (mr *MockStoreMockRecorder) CreateConvTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConvTx", reflect.TypeOf((*MockStore)(nil).CreateConvTx), arg0, arg1)
}

// CreateConversation mocks base method.
func (m *MockStore) CreateConversation(arg0 context.Context, arg1 sql.NullString) (db.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConversation", arg0, arg1)
	ret0, _ := ret[0].(db.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConversation indicates an expected call of CreateConversation.
func (mr *MockStoreMockRecorder) CreateConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversation", reflect.TypeOf((*MockStore)(nil).CreateConversation), arg0, arg1)
}

// CreateMessage mocks base method.
func (m *MockStore) CreateMessage(arg0 context.Context, arg1 db.CreateMessageParams) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockStoreMockRecorder) CreateMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockStore)(nil).CreateMessage), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUser_conversation mocks base method.
func (m *MockStore) CreateUser_conversation(arg0 context.Context, arg1 db.CreateUser_conversationParams) (db.UserConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser_conversation", arg0, arg1)
	ret0, _ := ret[0].(db.UserConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser_conversation indicates an expected call of CreateUser_conversation.
func (mr *MockStoreMockRecorder) CreateUser_conversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser_conversation", reflect.TypeOf((*MockStore)(nil).CreateUser_conversation), arg0, arg1)
}

// DeleteConversation mocks base method.
func (m *MockStore) DeleteConversation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConversation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConversation indicates an expected call of DeleteConversation.
func (mr *MockStoreMockRecorder) DeleteConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConversation", reflect.TypeOf((*MockStore)(nil).DeleteConversation), arg0, arg1)
}

// DeleteMessage mocks base method.
func (m *MockStore) DeleteMessage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockStoreMockRecorder) DeleteMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockStore)(nil).DeleteMessage), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUser_conversation mocks base method.
func (m *MockStore) DeleteUser_conversation(arg0 context.Context, arg1 db.DeleteUser_conversationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser_conversation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser_conversation indicates an expected call of DeleteUser_conversation.
func (mr *MockStoreMockRecorder) DeleteUser_conversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser_conversation", reflect.TypeOf((*MockStore)(nil).DeleteUser_conversation), arg0, arg1)
}

// DeleteUser_conversation_by_id mocks base method.
func (m *MockStore) DeleteUser_conversation_by_id(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser_conversation_by_id", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser_conversation_by_id indicates an expected call of DeleteUser_conversation_by_id.
func (mr *MockStoreMockRecorder) DeleteUser_conversation_by_id(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser_conversation_by_id", reflect.TypeOf((*MockStore)(nil).DeleteUser_conversation_by_id), arg0, arg1)
}

// GetConversation mocks base method.
func (m *MockStore) GetConversation(arg0 context.Context, arg1 int64) (db.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversation", arg0, arg1)
	ret0, _ := ret[0].(db.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversation indicates an expected call of GetConversation.
func (mr *MockStoreMockRecorder) GetConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversation", reflect.TypeOf((*MockStore)(nil).GetConversation), arg0, arg1)
}

// GetMessage mocks base method.
func (m *MockStore) GetMessage(arg0 context.Context, arg1 int64) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockStoreMockRecorder) GetMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockStore)(nil).GetMessage), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.GetUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUser_conv_by_id mocks base method.
func (m *MockStore) GetUser_conv_by_id(arg0 context.Context, arg1 int64) (db.UserConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser_conv_by_id", arg0, arg1)
	ret0, _ := ret[0].(db.UserConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser_conv_by_id indicates an expected call of GetUser_conv_by_id.
func (mr *MockStoreMockRecorder) GetUser_conv_by_id(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser_conv_by_id", reflect.TypeOf((*MockStore)(nil).GetUser_conv_by_id), arg0, arg1)
}

// GetUser_conversation mocks base method.
func (m *MockStore) GetUser_conversation(arg0 context.Context, arg1 db.GetUser_conversationParams) (db.UserConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser_conversation", arg0, arg1)
	ret0, _ := ret[0].(db.UserConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser_conversation indicates an expected call of GetUser_conversation.
func (mr *MockStoreMockRecorder) GetUser_conversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser_conversation", reflect.TypeOf((*MockStore)(nil).GetUser_conversation), arg0, arg1)
}

// ListConvFromUser mocks base method.
func (m *MockStore) ListConvFromUser(arg0 context.Context, arg1 int64) ([]db.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConvFromUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConvFromUser indicates an expected call of ListConvFromUser.
func (mr *MockStoreMockRecorder) ListConvFromUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConvFromUser", reflect.TypeOf((*MockStore)(nil).ListConvFromUser), arg0, arg1)
}

// ListConvMessages mocks base method.
func (m *MockStore) ListConvMessages(arg0 context.Context, arg1 db.ListConvMessagesParams) ([]db.ListConvMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConvMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.ListConvMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConvMessages indicates an expected call of ListConvMessages.
func (mr *MockStoreMockRecorder) ListConvMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConvMessages", reflect.TypeOf((*MockStore)(nil).ListConvMessages), arg0, arg1)
}

// ListConversations mocks base method.
func (m *MockStore) ListConversations(arg0 context.Context, arg1 db.ListConversationsParams) ([]db.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConversations", arg0, arg1)
	ret0, _ := ret[0].([]db.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConversations indicates an expected call of ListConversations.
func (mr *MockStoreMockRecorder) ListConversations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConversations", reflect.TypeOf((*MockStore)(nil).ListConversations), arg0, arg1)
}

// ListMessageByUser mocks base method.
func (m *MockStore) ListMessageByUser(arg0 context.Context, arg1 string) ([]db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessageByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessageByUser indicates an expected call of ListMessageByUser.
func (mr *MockStoreMockRecorder) ListMessageByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessageByUser", reflect.TypeOf((*MockStore)(nil).ListMessageByUser), arg0, arg1)
}

// ListUserMessages mocks base method.
func (m *MockStore) ListUserMessages(arg0 context.Context, arg1 int64) ([]db.ListUserMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUserMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserMessages indicates an expected call of ListUserMessages.
func (mr *MockStoreMockRecorder) ListUserMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserMessages", reflect.TypeOf((*MockStore)(nil).ListUserMessages), arg0, arg1)
}

// ListUser_conversationByUser mocks base method.
func (m *MockStore) ListUser_conversationByUser(arg0 context.Context, arg1 int64) ([]db.UserConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser_conversationByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.UserConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser_conversationByUser indicates an expected call of ListUser_conversationByUser.
func (mr *MockStoreMockRecorder) ListUser_conversationByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser_conversationByUser", reflect.TypeOf((*MockStore)(nil).ListUser_conversationByUser), arg0, arg1)
}

// ListUser_conversations mocks base method.
func (m *MockStore) ListUser_conversations(arg0 context.Context) ([]db.UserConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser_conversations", arg0)
	ret0, _ := ret[0].([]db.UserConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser_conversations indicates an expected call of ListUser_conversations.
func (mr *MockStoreMockRecorder) ListUser_conversations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser_conversations", reflect.TypeOf((*MockStore)(nil).ListUser_conversations), arg0)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.ListUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// SendMessage mocks base method.
func (m *MockStore) SendMessage(arg0 context.Context, arg1 db.SendMessageParams) (db.SendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(db.SendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockStoreMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockStore)(nil).SendMessage), arg0, arg1)
}

// UpdateConversation mocks base method.
func (m *MockStore) UpdateConversation(arg0 context.Context, arg1 db.UpdateConversationParams) (db.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConversation", arg0, arg1)
	ret0, _ := ret[0].(db.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConversation indicates an expected call of UpdateConversation.
func (mr *MockStoreMockRecorder) UpdateConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConversation", reflect.TypeOf((*MockStore)(nil).UpdateConversation), arg0, arg1)
}

// UpdateUserInfo mocks base method.
func (m *MockStore) UpdateUserInfo(arg0 context.Context, arg1 db.UpdateUserInfoParams) (db.UpdateUserInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateUserInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockStoreMockRecorder) UpdateUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockStore)(nil).UpdateUserInfo), arg0, arg1)
}
